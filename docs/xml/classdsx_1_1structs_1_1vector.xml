<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classdsx_1_1structs_1_1vector" kind="class" language="C++" prot="public">
    <compoundname>dsx::structs::vector</compoundname>
    <includes refid="vector_8hpp" local="no">vector.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdsx_1_1structs_1_1vector_1aefd95df71c065e1779813dd1f826e8d6" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int dsx::structs::vector&lt; T &gt;::_cap</definition>
        <argsstring></argsstring>
        <name>_cap</name>
        <qualifiedname>dsx::structs::vector::_cap</qualifiedname>
        <initializer>= 5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vector/vector.hpp" line="34" column="7" bodyfile="src/vector/vector.hpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdsx_1_1structs_1_1vector_1a2b7a208442307bd28a8fba63cef2424f" prot="private" static="no" mutable="no">
        <type>T *</type>
        <definition>T* dsx::structs::vector&lt; T &gt;::_arr</definition>
        <argsstring></argsstring>
        <name>_arr</name>
        <qualifiedname>dsx::structs::vector::_arr</qualifiedname>
        <initializer>= new T[_cap]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vector/vector.hpp" line="35" column="5" bodyfile="src/vector/vector.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdsx_1_1structs_1_1vector_1a8a7d1f2520585072b5430f1cf5d58103" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int dsx::structs::vector&lt; T &gt;::_len</definition>
        <argsstring></argsstring>
        <name>_len</name>
        <qualifiedname>dsx::structs::vector::_len</qualifiedname>
        <initializer>= {0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vector/vector.hpp" line="36" column="7" bodyfile="src/vector/vector.hpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdsx_1_1structs_1_1vector_1a79c7e69ade689139df0f23429f998bb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dsx::structs::vector&lt; T &gt;::vector</definition>
        <argsstring>()=default</argsstring>
        <name>vector</name>
        <qualifiedname>dsx::structs::vector::vector</qualifiedname>
        <briefdescription>
<para>Default constructor for the vector class. </para>
        </briefdescription>
        <detaileddescription>
<para>This constructor creates an empty vector with the default initial capacity. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vector/vector.hpp" line="44" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classdsx_1_1structs_1_1vector_1a80ada2169d2230c3cee8ad248cf222da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>dsx::structs::vector&lt; T &gt;::vector</definition>
        <argsstring>(std::initializer_list&lt; T &gt; list)</argsstring>
        <name>vector</name>
        <qualifiedname>dsx::structs::vector::vector</qualifiedname>
        <param>
          <type>std::initializer_list&lt; T &gt;</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Constructor that initializes the vector with elements from an initializer list. </para>
        </briefdescription>
        <detaileddescription>
<para>This constructor creates a vector with the elements provided in the given initializer list. It sets the length of the vector to the number of elements in the initializer list.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>An initializer list containing elements to be stored in the vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vector/vector.hpp" line="57" column="3" bodyfile="src/vector/vector.hpp" bodystart="57" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classdsx_1_1structs_1_1vector_1ace40aeceb3c34ad364185ebe830095be" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>dsx::structs::vector&lt; T &gt;::vector</definition>
        <argsstring>(int p_size)</argsstring>
        <name>vector</name>
        <qualifiedname>dsx::structs::vector::vector</qualifiedname>
        <param>
          <type>int</type>
          <declname>p_size</declname>
        </param>
        <briefdescription>
<para>Constructor that sets the initial size of the vector. </para>
        </briefdescription>
        <detaileddescription>
<para>This constructor creates a vector with the specified initial size. It allocates memory for the underlying array with the given size and sets the capacity accordingly.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The initial size of the vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>If memory allocation fails. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vector/vector.hpp" line="73" column="12" bodyfile="src/vector/vector.hpp" bodystart="73" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classdsx_1_1structs_1_1vector_1ae213f4a043537c6cd57e33407eea6608" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>dsx::structs::vector&lt; T &gt;::~vector</definition>
        <argsstring>()</argsstring>
        <name>~vector</name>
        <qualifiedname>dsx::structs::vector::~vector</qualifiedname>
        <briefdescription>
<para>Destructor for the vector class. </para>
        </briefdescription>
        <detaileddescription>
<para>This destructor automatically deallocates the memory used by the underlying array when the vector goes out of scope. It ensures that there are no memory leaks and releases the resources held by the vector. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vector/vector.hpp" line="99" column="3" bodyfile="src/vector/vector.hpp" bodystart="99" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classdsx_1_1structs_1_1vector_1aea26229420a6bbf1cbd2a77a22290753" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int dsx::structs::vector&lt; T &gt;::len</definition>
        <argsstring>() const</argsstring>
        <name>len</name>
        <qualifiedname>dsx::structs::vector::len</qualifiedname>
        <briefdescription>
<para>Get the current number of elements in the vector. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns the current number of elements present in the vector.</para>
<para><simplesect kind="return"><para>The number of elements in the vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vector/vector.hpp" line="109" column="8" bodyfile="src/vector/vector.hpp" bodystart="109" bodyend="109"/>
        <referencedby refid="classdsx_1_1structs_1_1vector_1a326cc2694be88ca78dfe7b6fd7e559df" compoundref="vector_8hpp" startline="129" endline="129">dsx::structs::vector&lt; T &gt;::is_empty</referencedby>
      </memberdef>
      <memberdef kind="function" id="classdsx_1_1structs_1_1vector_1aff5c628bb57b8016939d5ab284204b83" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int dsx::structs::vector&lt; T &gt;::capacity</definition>
        <argsstring>() const</argsstring>
        <name>capacity</name>
        <qualifiedname>dsx::structs::vector::capacity</qualifiedname>
        <briefdescription>
<para>Get the current capacity of the vector. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns the current capacity of the vector, which represents the maximum number of elements that can be stored without reallocation.</para>
<para><simplesect kind="return"><para>The current capacity of the vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vector/vector.hpp" line="119" column="8" bodyfile="src/vector/vector.hpp" bodystart="119" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classdsx_1_1structs_1_1vector_1a326cc2694be88ca78dfe7b6fd7e559df" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool dsx::structs::vector&lt; T &gt;::is_empty</definition>
        <argsstring>() const</argsstring>
        <name>is_empty</name>
        <qualifiedname>dsx::structs::vector::is_empty</qualifiedname>
        <briefdescription>
<para>Check if the vector is empty. </para>
        </briefdescription>
        <detaileddescription>
<para>This function checks whether the vector is empty, i.e., if it contains no elements.</para>
<para><simplesect kind="return"><para>True if the vector is empty, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vector/vector.hpp" line="129" column="9" bodyfile="src/vector/vector.hpp" bodystart="129" bodyend="129"/>
        <references refid="classdsx_1_1structs_1_1vector_1aea26229420a6bbf1cbd2a77a22290753" compoundref="vector_8hpp" startline="109" endline="109">dsx::structs::vector&lt; T &gt;::len</references>
        <referencedby refid="classdsx_1_1structs_1_1vector_1a2a8f7c5710eaac9b06a7366e426bc126" compoundref="vector_8hpp" startline="356" endline="366">dsx::structs::vector&lt; T &gt;::pop</referencedby>
      </memberdef>
      <memberdef kind="function" id="classdsx_1_1structs_1_1vector_1a0d6e589875e22d2e17d2ea1deba69abd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dsx::structs::vector&lt; T &gt;::reserve</definition>
        <argsstring>(int n_size)</argsstring>
        <name>reserve</name>
        <qualifiedname>dsx::structs::vector::reserve</qualifiedname>
        <param>
          <type>int</type>
          <declname>n_size</declname>
        </param>
        <briefdescription>
<para>Reserves memory for a given number of elements in the vector. </para>
        </briefdescription>
        <detaileddescription>
<para>If the requested size is less than or equal to the current capacity, the function does nothing. Otherwise, it allocates memory for the specified number of elements and copies the existing elements to the newly allocated memory. The function updates the capacity of the vector accordingly.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements to reserve memory for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>If memory allocation fails. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vector/vector.hpp" line="142" column="8" bodyfile="src/vector/vector.hpp" bodystart="300" bodyend="318"/>
        <referencedby refid="classdsx_1_1structs_1_1vector_1a5e086b46fe16e1d3cddfeb57394a2b4a" compoundref="vector_8hpp" startline="346" endline="354">dsx::structs::vector&lt; T &gt;::push</referencedby>
        <referencedby refid="classdsx_1_1structs_1_1vector_1ab7612d091ae431bc5e95b707f2db395f" compoundref="vector_8hpp" startline="432" endline="445">dsx::structs::vector&lt; T &gt;::resize</referencedby>
      </memberdef>
      <memberdef kind="function" id="classdsx_1_1structs_1_1vector_1a0cea90f4ec517324152a2194746e224c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dsx::structs::vector&lt; T &gt;::shrink</definition>
        <argsstring>()</argsstring>
        <name>shrink</name>
        <qualifiedname>dsx::structs::vector::shrink</qualifiedname>
        <briefdescription>
<para>Reduces the vector&apos;s capacity to fit its size. </para>
        </briefdescription>
        <detaileddescription>
<para>This function deallocates the unused memory from the underlying array, reducing the vector&apos;s capacity to be equal to the number of elements it contains. If the vector is empty, the function does nothing.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>If memory reallocation fails while shrinking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vector/vector.hpp" line="153" column="8" bodyfile="src/vector/vector.hpp" bodystart="320" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="classdsx_1_1structs_1_1vector_1a92a0c981cb9bf49c26d6aef837c58776" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T dsx::structs::vector&lt; T &gt;::at</definition>
        <argsstring>(int p_idx) const</argsstring>
        <name>at</name>
        <qualifiedname>dsx::structs::vector::at</qualifiedname>
        <param>
          <type>int</type>
          <declname>p_idx</declname>
        </param>
        <briefdescription>
<para>Returns the element at the specified index. </para>
        </briefdescription>
        <detaileddescription>
<para>This function provides access to the element at the specified index in the vector. It performs boundary checks to ensure that the index is within the valid range of the vector. If the index is out of range, the function throws an std::out_of_range exception.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the element to access. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The element at the specified index. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>If the index is out of range. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vector/vector.hpp" line="167" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classdsx_1_1structs_1_1vector_1aefa7260fda881cb0f1f1803b87d1fe75" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; dsx::structs::vector&lt; T &gt;::operator[]</definition>
        <argsstring>(int p_idx) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>dsx::structs::vector::operator[]</qualifiedname>
        <param>
          <type>int</type>
          <declname>p_idx</declname>
        </param>
        <briefdescription>
<para>Returns a reference to the element at the specified index. </para>
        </briefdescription>
        <detaileddescription>
<para>This operator provides direct access to the element at the specified index in the vector. It performs boundary checks to ensure that the index is within the valid range of the vector. If the index is out of range, the operator throws an std::out_of_range exception.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the element to access. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the element at the specified index. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>If the index is out of range. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vector/vector.hpp" line="181" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classdsx_1_1structs_1_1vector_1ae6aa9f8cd4f18b5ddce9609f7ceb0f5f" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; dsx::structs::vector&lt; T &gt;::front</definition>
        <argsstring>() const noexcept</argsstring>
        <name>front</name>
        <qualifiedname>dsx::structs::vector::front</qualifiedname>
        <briefdescription>
<para>Returns a reference to the first element in the vector. </para>
        </briefdescription>
        <detaileddescription>
<para>This function provides access to the first element in the vector. It is used to retrieve the first element when the vector is not empty. It does not check if the vector is empty; calling this function on an empty vector results in undefined behavior.</para>
<para><simplesect kind="return"><para>A reference to the first element in the vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vector/vector.hpp" line="193" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classdsx_1_1structs_1_1vector_1ac18424a77e9be27b93ab11e7531ebe53" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; dsx::structs::vector&lt; T &gt;::back</definition>
        <argsstring>() const noexcept</argsstring>
        <name>back</name>
        <qualifiedname>dsx::structs::vector::back</qualifiedname>
        <briefdescription>
<para>Returns a reference to the last element in the vector. </para>
        </briefdescription>
        <detaileddescription>
<para>This function provides access to the last element in the vector. It is used to retrieve the last element when the vector is not empty. It does not check if the vector is empty; calling this function on an empty vector results in undefined behavior.</para>
<para><simplesect kind="return"><para>A reference to the last element in the vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vector/vector.hpp" line="205" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classdsx_1_1structs_1_1vector_1a5e086b46fe16e1d3cddfeb57394a2b4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dsx::structs::vector&lt; T &gt;::push</definition>
        <argsstring>(const T &amp;elt)</argsstring>
        <name>push</name>
        <qualifiedname>dsx::structs::vector::push</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>elt</declname>
        </param>
        <briefdescription>
<para>Adds an element to the end of the vector. </para>
        </briefdescription>
        <detaileddescription>
<para>This function adds a new element to the end of the vector. If the vector&apos;s size is about to exceed its current capacity, the function doubles the capacity and reallocates memory for the underlying array to accommodate the new element efficiently.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>elt</parametername>
</parameternamelist>
<parameterdescription>
<para>The element to be added to the end of the vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vector/vector.hpp" line="217" column="8" bodyfile="src/vector/vector.hpp" bodystart="346" bodyend="354"/>
        <references refid="classdsx_1_1structs_1_1vector_1a0d6e589875e22d2e17d2ea1deba69abd" compoundref="vector_8hpp" startline="300" endline="318">dsx::structs::vector&lt; T &gt;::reserve</references>
        <referencedby refid="classdsx_1_1structs_1_1vector_1ae003c0c56d315d6e0446192a5e268183" compoundref="vector_8hpp" startline="369" endline="401">dsx::structs::vector&lt; T &gt;::insert_at</referencedby>
      </memberdef>
      <memberdef kind="function" id="classdsx_1_1structs_1_1vector_1a2a8f7c5710eaac9b06a7366e426bc126" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; T &gt;</type>
        <definition>std::optional&lt; T &gt; dsx::structs::vector&lt; T &gt;::pop</definition>
        <argsstring>()</argsstring>
        <name>pop</name>
        <qualifiedname>dsx::structs::vector::pop</qualifiedname>
        <briefdescription>
<para>Removes and returns the last element of the vector. </para>
        </briefdescription>
        <detaileddescription>
<para>This function removes the last element of the vector and returns it as an optional value. If the vector is empty, the function returns an empty optional (std::nullopt).</para>
<para><simplesect kind="return"><para>An optional containing the last element of the vector if the vector is not empty, or an empty optional if the vector is empty. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vector/vector.hpp" line="229" column="17" bodyfile="src/vector/vector.hpp" bodystart="356" bodyend="366"/>
        <references refid="classdsx_1_1structs_1_1vector_1a326cc2694be88ca78dfe7b6fd7e559df" compoundref="vector_8hpp" startline="129" endline="129">dsx::structs::vector&lt; T &gt;::is_empty</references>
      </memberdef>
      <memberdef kind="function" id="classdsx_1_1structs_1_1vector_1ae003c0c56d315d6e0446192a5e268183" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dsx::structs::vector&lt; T &gt;::insert_at</definition>
        <argsstring>(const T &amp;elt, int idx)</argsstring>
        <name>insert_at</name>
        <qualifiedname>dsx::structs::vector::insert_at</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>elt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Inserts an element at the specified index. </para>
        </briefdescription>
        <detaileddescription>
<para>This function inserts a new element at the specified index in the vector. If the index is greater than or equal to the current length of the vector, the function behaves like <computeroutput>push</computeroutput> and adds the element to the end of the vector. If the vector&apos;s size is about to exceed its current capacity, the function doubles the capacity and reallocates memory for the underlying array to accommodate the new element efficiently.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>elt</parametername>
</parameternamelist>
<parameterdescription>
<para>The element to be inserted into the vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>The index at which the element should be inserted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vector/vector.hpp" line="244" column="8" bodyfile="src/vector/vector.hpp" bodystart="369" bodyend="401"/>
        <references refid="classdsx_1_1structs_1_1vector_1a5e086b46fe16e1d3cddfeb57394a2b4a" compoundref="vector_8hpp" startline="346" endline="354">dsx::structs::vector&lt; T &gt;::push</references>
      </memberdef>
      <memberdef kind="function" id="classdsx_1_1structs_1_1vector_1abb50d683767ef3c4d88b34b5ad48b3c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; T &gt;</type>
        <definition>std::optional&lt; T &gt; dsx::structs::vector&lt; T &gt;::erase_at</definition>
        <argsstring>(int idx)</argsstring>
        <name>erase_at</name>
        <qualifiedname>dsx::structs::vector::erase_at</qualifiedname>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Removes and returns the element at the specified index. </para>
        </briefdescription>
        <detaileddescription>
<para>This function removes the element at the specified index in the vector and returns it as an optional value. If the index is out of range, the function returns an empty optional (std::nullopt).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the element to be removed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An optional containing the removed element if the index is valid, or an empty optional if the index is out of range. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vector/vector.hpp" line="257" column="17" bodyfile="src/vector/vector.hpp" bodystart="404" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="classdsx_1_1structs_1_1vector_1afc1eb03bf3d9c8389b36456c12cadb66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dsx::structs::vector&lt; T &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <qualifiedname>dsx::structs::vector::clear</qualifiedname>
        <briefdescription>
<para>Removes all elements from the vector. </para>
        </briefdescription>
        <detaileddescription>
<para>This function removes all elements from the vector, leaving it empty. It deallocates the memory used by the underlying array and resets the length and capacity to zero.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>If memory reallocation fails while clearing the vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vector/vector.hpp" line="269" column="8" bodyfile="src/vector/vector.hpp" bodystart="416" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="classdsx_1_1structs_1_1vector_1ab7612d091ae431bc5e95b707f2db395f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dsx::structs::vector&lt; T &gt;::resize</definition>
        <argsstring>(int n_size)</argsstring>
        <name>resize</name>
        <qualifiedname>dsx::structs::vector::resize</qualifiedname>
        <param>
          <type>int</type>
          <declname>n_size</declname>
        </param>
        <briefdescription>
<para>Resizes the vector to the specified size. </para>
        </briefdescription>
        <detaileddescription>
<para>This function resizes the vector to the specified size. If the new size is smaller than the current length, elements at the end of the vector are removed. If the new size is larger than the current length, the vector&apos;s capacity is adjusted to accommodate the new size efficiently.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The new size of the vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>If memory reallocation fails while resizing the vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vector/vector.hpp" line="283" column="8" bodyfile="src/vector/vector.hpp" bodystart="432" bodyend="445"/>
        <references refid="classdsx_1_1structs_1_1vector_1a0d6e589875e22d2e17d2ea1deba69abd" compoundref="vector_8hpp" startline="300" endline="318">dsx::structs::vector&lt; T &gt;::reserve</references>
      </memberdef>
      <memberdef kind="function" id="classdsx_1_1structs_1_1vector_1affadecdd1b5acb01d8cbbb0b16b8c647" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dsx::structs::vector&lt; T &gt;::swap</definition>
        <argsstring>(vector&lt; T &gt; &amp;o_vec)</argsstring>
        <name>swap</name>
        <qualifiedname>dsx::structs::vector::swap</qualifiedname>
        <param>
          <type><ref refid="classdsx_1_1structs_1_1vector" kindref="compound">vector</ref>&lt; T &gt; &amp;</type>
          <declname>o_vec</declname>
        </param>
        <briefdescription>
<para>Swaps the contents of two vectors. </para>
        </briefdescription>
        <detaileddescription>
<para>This function swaps the contents of the current vector with the contents of another vector. It exchanges the lengths, capacities, and underlying arrays of the two vectors.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>o_vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The reference to the vector to be swapped with the current vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/vector/vector.hpp" line="295" column="8" bodyfile="src/vector/vector.hpp" bodystart="448" bodyend="452"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A dynamic array-based vector container implementation. </para>
    </briefdescription>
    <detaileddescription>
<para>The vector class provides a dynamic array-based container for holding elements of a specified type. It automatically resizes its underlying array to accommodate the elements as they are added or removed.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of elements held in the vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cap</parametername>
</parameternamelist>
<parameterdescription>
<para>The initial capacity of the vector. Defaults to 5. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="src/vector/vector.hpp" line="32" column="12" bodyfile="src/vector/vector.hpp" bodystart="32" bodyend="296"/>
    <listofallmembers>
      <member refid="classdsx_1_1structs_1_1vector_1a2b7a208442307bd28a8fba63cef2424f" prot="private" virt="non-virtual"><scope>dsx::structs::vector</scope><name>_arr</name></member>
      <member refid="classdsx_1_1structs_1_1vector_1aefd95df71c065e1779813dd1f826e8d6" prot="private" virt="non-virtual"><scope>dsx::structs::vector</scope><name>_cap</name></member>
      <member refid="classdsx_1_1structs_1_1vector_1a8a7d1f2520585072b5430f1cf5d58103" prot="private" virt="non-virtual"><scope>dsx::structs::vector</scope><name>_len</name></member>
      <member refid="classdsx_1_1structs_1_1vector_1a92a0c981cb9bf49c26d6aef837c58776" prot="public" virt="non-virtual"><scope>dsx::structs::vector</scope><name>at</name></member>
      <member refid="classdsx_1_1structs_1_1vector_1ac18424a77e9be27b93ab11e7531ebe53" prot="public" virt="non-virtual"><scope>dsx::structs::vector</scope><name>back</name></member>
      <member refid="classdsx_1_1structs_1_1vector_1aff5c628bb57b8016939d5ab284204b83" prot="public" virt="non-virtual"><scope>dsx::structs::vector</scope><name>capacity</name></member>
      <member refid="classdsx_1_1structs_1_1vector_1afc1eb03bf3d9c8389b36456c12cadb66" prot="public" virt="non-virtual"><scope>dsx::structs::vector</scope><name>clear</name></member>
      <member refid="classdsx_1_1structs_1_1vector_1abb50d683767ef3c4d88b34b5ad48b3c9" prot="public" virt="non-virtual"><scope>dsx::structs::vector</scope><name>erase_at</name></member>
      <member refid="classdsx_1_1structs_1_1vector_1ae6aa9f8cd4f18b5ddce9609f7ceb0f5f" prot="public" virt="non-virtual"><scope>dsx::structs::vector</scope><name>front</name></member>
      <member refid="classdsx_1_1structs_1_1vector_1ae003c0c56d315d6e0446192a5e268183" prot="public" virt="non-virtual"><scope>dsx::structs::vector</scope><name>insert_at</name></member>
      <member refid="classdsx_1_1structs_1_1vector_1a326cc2694be88ca78dfe7b6fd7e559df" prot="public" virt="non-virtual"><scope>dsx::structs::vector</scope><name>is_empty</name></member>
      <member refid="classdsx_1_1structs_1_1vector_1aea26229420a6bbf1cbd2a77a22290753" prot="public" virt="non-virtual"><scope>dsx::structs::vector</scope><name>len</name></member>
      <member refid="classdsx_1_1structs_1_1vector_1aefa7260fda881cb0f1f1803b87d1fe75" prot="public" virt="non-virtual"><scope>dsx::structs::vector</scope><name>operator[]</name></member>
      <member refid="classdsx_1_1structs_1_1vector_1a2a8f7c5710eaac9b06a7366e426bc126" prot="public" virt="non-virtual"><scope>dsx::structs::vector</scope><name>pop</name></member>
      <member refid="classdsx_1_1structs_1_1vector_1a5e086b46fe16e1d3cddfeb57394a2b4a" prot="public" virt="non-virtual"><scope>dsx::structs::vector</scope><name>push</name></member>
      <member refid="classdsx_1_1structs_1_1vector_1a0d6e589875e22d2e17d2ea1deba69abd" prot="public" virt="non-virtual"><scope>dsx::structs::vector</scope><name>reserve</name></member>
      <member refid="classdsx_1_1structs_1_1vector_1ab7612d091ae431bc5e95b707f2db395f" prot="public" virt="non-virtual"><scope>dsx::structs::vector</scope><name>resize</name></member>
      <member refid="classdsx_1_1structs_1_1vector_1a0cea90f4ec517324152a2194746e224c" prot="public" virt="non-virtual"><scope>dsx::structs::vector</scope><name>shrink</name></member>
      <member refid="classdsx_1_1structs_1_1vector_1affadecdd1b5acb01d8cbbb0b16b8c647" prot="public" virt="non-virtual"><scope>dsx::structs::vector</scope><name>swap</name></member>
      <member refid="classdsx_1_1structs_1_1vector_1a79c7e69ade689139df0f23429f998bb6" prot="public" virt="non-virtual"><scope>dsx::structs::vector</scope><name>vector</name></member>
      <member refid="classdsx_1_1structs_1_1vector_1a80ada2169d2230c3cee8ad248cf222da" prot="public" virt="non-virtual"><scope>dsx::structs::vector</scope><name>vector</name></member>
      <member refid="classdsx_1_1structs_1_1vector_1ace40aeceb3c34ad364185ebe830095be" prot="public" virt="non-virtual"><scope>dsx::structs::vector</scope><name>vector</name></member>
      <member refid="classdsx_1_1structs_1_1vector_1ae213f4a043537c6cd57e33407eea6608" prot="public" virt="non-virtual"><scope>dsx::structs::vector</scope><name>~vector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
