<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_vector_8hpp_source" xml:lang="en-US">
<title>vector.hpp</title>
<indexterm><primary>src/vector/vector.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 
6 <emphasis role="preprocessor">#pragma&#32;once</emphasis>
7 
8 <emphasis role="preprocessor">#include&#32;&quot;v_exceptions.hpp&quot;</emphasis>
9 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
10 <emphasis role="preprocessor">#include&#32;&lt;array&gt;</emphasis>
11 <emphasis role="preprocessor">#include&#32;&lt;cstddef&gt;</emphasis>
12 <emphasis role="preprocessor">#include&#32;&lt;initializer_list&gt;</emphasis>
13 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
14 <emphasis role="preprocessor">#include&#32;&lt;memory&gt;</emphasis>
15 <emphasis role="preprocessor">#include&#32;&lt;optional&gt;</emphasis>
16 <emphasis role="preprocessor">#include&#32;&lt;sstream&gt;</emphasis>
17 <emphasis role="preprocessor">#include&#32;&lt;stdexcept&gt;</emphasis>
18 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
19 
20 <emphasis role="keyword">namespace&#32;</emphasis>dsx::structs&#32;{
21 
32 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classdsx_1_1structs_1_1vector">vector</link>&#32;{
33 <emphasis role="keyword">private</emphasis>:
34 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;_cap&#32;=&#32;5;
35 &#32;&#32;T&#32;*_arr&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;T[_cap];
36 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;_len&#32;=&#32;{0};
37 
38 <emphasis role="keyword">public</emphasis>:
44 &#32;&#32;<link linkend="_classdsx_1_1structs_1_1vector_1a79c7e69ade689139df0f23429f998bb6">vector</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
45 
57 &#32;&#32;<link linkend="_classdsx_1_1structs_1_1vector_1a80ada2169d2230c3cee8ad248cf222da">vector</link>(std::initializer_list&lt;T&gt;&#32;list)&#32;:&#32;_len(list.size())&#32;{
58 &#32;&#32;&#32;&#32;_arr&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;T[_cap];&#32;<emphasis role="comment">//&#32;Allocate&#32;memory&#32;for&#32;the&#32;array</emphasis>
59 &#32;&#32;&#32;&#32;std::copy(list.begin(),&#32;list.end(),
60 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_arr);&#32;<emphasis role="comment">//&#32;Copy&#32;elements&#32;from&#32;the&#32;initializer&#32;list&#32;to&#32;the&#32;array</emphasis>
61 &#32;&#32;}
62 
73 &#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_classdsx_1_1structs_1_1vector_1ace40aeceb3c34ad364185ebe830095be">vector</link>(<emphasis role="keywordtype">int</emphasis>&#32;p_size)&#32;{
74 &#32;&#32;&#32;&#32;T&#32;*n_arr&#32;=
75 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;T[p_size];&#32;<emphasis role="comment">//&#32;Allocate&#32;memory&#32;for&#32;the&#32;new&#32;array&#32;with&#32;the&#32;given&#32;size</emphasis>
76 
77 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;_arr;&#32;<emphasis role="comment">//&#32;Deallocate&#32;memory&#32;from&#32;the&#32;previous&#32;array</emphasis>
78 
79 &#32;&#32;&#32;&#32;_arr&#32;=&#32;n_arr;&#32;<emphasis role="comment">//&#32;Update&#32;the&#32;pointer&#32;to&#32;the&#32;newly&#32;allocated&#32;array</emphasis>
80 
81 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_arr)&#32;{
82 &#32;&#32;&#32;&#32;&#32;&#32;std::stringstream&#32;ss;
83 &#32;&#32;&#32;&#32;&#32;&#32;ss&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Memory&#32;reallocation&#32;failed&#32;at&#32;line:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;__LINE__
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;in&#32;function:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;__FUNCTION__;
85 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ss.str());&#32;<emphasis role="comment">//&#32;Throw&#32;an&#32;error&#32;if&#32;memory&#32;allocation&#32;fails</emphasis>
87 &#32;&#32;&#32;&#32;}
88 
89 &#32;&#32;&#32;&#32;_cap&#32;=&#32;p_size;&#32;<emphasis role="comment">//&#32;Update&#32;the&#32;capacity&#32;of&#32;the&#32;vector</emphasis>
90 &#32;&#32;}
91 
99 &#32;&#32;<link linkend="_classdsx_1_1structs_1_1vector_1ae213f4a043537c6cd57e33407eea6608">~vector</link>()&#32;{&#32;<emphasis role="keyword">delete</emphasis>[]&#32;_arr;&#32;}
100 
101 <emphasis role="keyword">public</emphasis>:
109 &#32;&#32;[[nodiscard]]&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classdsx_1_1structs_1_1vector_1aea26229420a6bbf1cbd2a77a22290753">len</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_len;&#32;}
110 
119 &#32;&#32;[[nodiscard]]&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classdsx_1_1structs_1_1vector_1aff5c628bb57b8016939d5ab284204b83">capacity</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_cap;&#32;}
120 
129 &#32;&#32;[[nodiscard]]&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classdsx_1_1structs_1_1vector_1a326cc2694be88ca78dfe7b6fd7e559df">is_empty</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classdsx_1_1structs_1_1vector_1aea26229420a6bbf1cbd2a77a22290753">len</link>()&#32;==&#32;0;&#32;}
130 
142 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdsx_1_1structs_1_1vector_1a0d6e589875e22d2e17d2ea1deba69abd">reserve</link>(<emphasis role="keywordtype">int</emphasis>&#32;n_size);
143 
153 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdsx_1_1structs_1_1vector_1a0cea90f4ec517324152a2194746e224c">shrink</link>();
154 
167 &#32;&#32;T&#32;<link linkend="_classdsx_1_1structs_1_1vector_1a92a0c981cb9bf49c26d6aef837c58776">at</link>(<emphasis role="keywordtype">int</emphasis>&#32;p_idx)&#32;<emphasis role="keyword">const</emphasis>;
168 
181 &#32;&#32;T&#32;&amp;<link linkend="_classdsx_1_1structs_1_1vector_1aefa7260fda881cb0f1f1803b87d1fe75">operator[]</link>(<emphasis role="keywordtype">int</emphasis>&#32;p_idx)&#32;<emphasis role="keyword">const</emphasis>;
182 
193 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;T&#32;&amp;<link linkend="_classdsx_1_1structs_1_1vector_1ae6aa9f8cd4f18b5ddce9609f7ceb0f5f">front</link>()&#32;const&#32;noexcept;
194 
205 &#32;&#32;const&#32;T&#32;&amp;<link linkend="_classdsx_1_1structs_1_1vector_1ac18424a77e9be27b93ab11e7531ebe53">back</link>()&#32;const&#32;noexcept;
206 
217 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdsx_1_1structs_1_1vector_1a5e086b46fe16e1d3cddfeb57394a2b4a">push</link>(const&#32;T&#32;&amp;elt);
218 
229 &#32;&#32;std::optional&lt;T&gt;&#32;<link linkend="_classdsx_1_1structs_1_1vector_1a2a8f7c5710eaac9b06a7366e426bc126">pop</link>();
230 
244 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdsx_1_1structs_1_1vector_1ae003c0c56d315d6e0446192a5e268183">insert_at</link>(const&#32;T&#32;&amp;elt,&#32;<emphasis role="keywordtype">int</emphasis>&#32;idx);
245 
257 &#32;&#32;std::optional&lt;T&gt;&#32;<link linkend="_classdsx_1_1structs_1_1vector_1abb50d683767ef3c4d88b34b5ad48b3c9">erase_at</link>(<emphasis role="keywordtype">int</emphasis>&#32;idx);
258 
269 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdsx_1_1structs_1_1vector_1afc1eb03bf3d9c8389b36456c12cadb66">clear</link>();
270 
283 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdsx_1_1structs_1_1vector_1ab7612d091ae431bc5e95b707f2db395f">resize</link>(<emphasis role="keywordtype">int</emphasis>&#32;n_size);
284 
295 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdsx_1_1structs_1_1vector_1affadecdd1b5acb01d8cbbb0b16b8c647">swap</link>(<link linkend="_classdsx_1_1structs_1_1vector">vector</link>&lt;T&gt;&#32;&amp;o_vec);
296 };
297 
298 }&#32;<emphasis role="comment">//&#32;namespace&#32;dsx::structs</emphasis>
299 template&#32;&lt;typename&#32;T&gt;
300 <emphasis role="keywordtype">void</emphasis>&#32;dsx::structs::<link linkend="_classdsx_1_1structs_1_1vector">vector</link>&lt;T&gt;::<link linkend="_classdsx_1_1structs_1_1vector_1a0d6e589875e22d2e17d2ea1deba69abd">reserve</link>(<emphasis role="keywordtype">int</emphasis>&#32;n_size)&#32;noexcept(false)&#32;{
301 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n_size&#32;&lt;=&#32;_cap)&#32;{
302 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
303 &#32;&#32;}
304 
305 &#32;&#32;T&#32;*new_arr&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;T[n_size];
306 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!new_arr)&#32;{
307 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;new_arr;
308 &#32;&#32;&#32;&#32;std::stringstream&#32;ss;
309 &#32;&#32;&#32;&#32;ss&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Memory&#32;reallocation&#32;failed&#32;at&#32;line:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;__LINE__
310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;in&#32;function:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;__FUNCTION__;
311 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(ss.str());
312 &#32;&#32;}
313 
314 &#32;&#32;std::copy(_arr,&#32;_arr&#32;+&#32;_len,&#32;new_arr);
315 &#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;_arr;
316 &#32;&#32;_arr&#32;=&#32;new_arr;
317 &#32;&#32;_cap&#32;=&#32;n_size;
318 }
319 
320 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdsx_1_1structs_1_1vector_1a0cea90f4ec517324152a2194746e224c">dsx::structs::vector&lt;T&gt;::shrink</link>()&#32;noexcept(false)&#32;{
321 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_len&#32;==&#32;0)&#32;{
322 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
323 &#32;&#32;}
324 
325 &#32;&#32;T&#32;*new_arr&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;T[_len];
326 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!new_arr)&#32;{
327 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;new_arr;
328 &#32;&#32;&#32;&#32;std::stringstream&#32;ss;
329 &#32;&#32;&#32;&#32;ss&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Memory&#32;reallocation&#32;failed&#32;at&#32;line:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;__LINE__
330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;in&#32;function:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;__FUNCTION__;
331 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(ss.str());
332 &#32;&#32;}
333 &#32;&#32;std::copy(_arr,&#32;_arr&#32;+&#32;_len,&#32;new_arr);
334 &#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;_arr;
335 &#32;&#32;_arr&#32;=&#32;new_arr;
336 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_arr)&#32;{
337 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;new_arr;
338 &#32;&#32;&#32;&#32;std::stringstream&#32;ss;
339 &#32;&#32;&#32;&#32;ss&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Memory&#32;reallocation&#32;failed&#32;at&#32;line:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;__LINE__
340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;in&#32;function:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;__FUNCTION__;
341 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(ss.str());
342 &#32;&#32;}
343 &#32;&#32;_cap&#32;=&#32;_len;
344 }
345 
346 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdsx_1_1structs_1_1vector_1a5e086b46fe16e1d3cddfeb57394a2b4a">dsx::structs::vector&lt;T&gt;::push</link>(<emphasis role="keyword">const</emphasis>&#32;T&#32;&amp;elt)&#32;{
347 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_len&#32;+&#32;1&#32;&gt;=&#32;_cap)&#32;{
348 &#32;&#32;&#32;&#32;<link linkend="_classdsx_1_1structs_1_1vector_1a0d6e589875e22d2e17d2ea1deba69abd">reserve</link>(_cap&#32;*&#32;2&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(*_arr));
349 &#32;&#32;&#32;&#32;_cap&#32;*=&#32;2;
350 &#32;&#32;}
351 
352 &#32;&#32;_arr[_len]&#32;=&#32;elt;
353 &#32;&#32;_len++;
354 }
355 
356 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;&#32;std::optional&lt;T&gt;&#32;<link linkend="_classdsx_1_1structs_1_1vector_1a2a8f7c5710eaac9b06a7366e426bc126">dsx::structs::vector&lt;T&gt;::pop</link>()&#32;{
357 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classdsx_1_1structs_1_1vector_1a326cc2694be88ca78dfe7b6fd7e559df">is_empty</link>())&#32;{
358 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::nullopt;
359 &#32;&#32;}
360 
361 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;popped&#32;=&#32;_arr[_len&#32;-&#32;1];
362 &#32;&#32;_arr[_len&#32;-&#32;1]&#32;=&#32;{};
363 &#32;&#32;--_len;
364 
365 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;popped;
366 }
367 
368 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
369 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdsx_1_1structs_1_1vector_1ae003c0c56d315d6e0446192a5e268183">dsx::structs::vector&lt;T&gt;::insert_at</link>(<emphasis role="keyword">const</emphasis>&#32;T&#32;&amp;elt,&#32;<emphasis role="keywordtype">int</emphasis>&#32;idx)&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">false</emphasis>)&#32;{
370 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(idx&#32;&gt;=&#32;_len)&#32;{
371 &#32;&#32;&#32;&#32;<link linkend="_classdsx_1_1structs_1_1vector_1a5e086b46fe16e1d3cddfeb57394a2b4a">push</link>(elt);
372 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
373 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_len&#32;==&#32;_cap)&#32;{
374 &#32;&#32;&#32;&#32;&#32;&#32;_cap&#32;=&#32;(_cap&#32;==&#32;0)&#32;?&#32;5&#32;:&#32;_cap&#32;*&#32;2;
375 &#32;&#32;&#32;&#32;&#32;&#32;T&#32;*new_arr&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;T[_cap];
376 
377 &#32;&#32;&#32;&#32;&#32;&#32;std::copy(_arr,&#32;_arr&#32;+&#32;idx,&#32;new_arr);
378 &#32;&#32;&#32;&#32;&#32;&#32;new_arr[idx]&#32;=&#32;elt;
379 &#32;&#32;&#32;&#32;&#32;&#32;std::copy(_arr&#32;+&#32;idx,&#32;_arr&#32;+&#32;_len,&#32;new_arr&#32;+&#32;idx&#32;+&#32;1);
380 
381 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;_arr;
382 &#32;&#32;&#32;&#32;&#32;&#32;_arr&#32;=&#32;new_arr;
383 
384 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_arr)&#32;{
385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::stringstream&#32;ss;
386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ss&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Memory&#32;reallocation&#32;failed&#32;at&#32;line:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;__LINE__
387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;in&#32;function:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;__FUNCTION__;
388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(ss.str());
389 &#32;&#32;&#32;&#32;&#32;&#32;}
390 
391 &#32;&#32;&#32;&#32;&#32;&#32;_len++;
392 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
393 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;_len;&#32;i&#32;&gt;&#32;idx;&#32;--i)&#32;{
394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_arr[i]&#32;=&#32;_arr[i&#32;-&#32;1];
395 &#32;&#32;&#32;&#32;&#32;&#32;}
396 
397 &#32;&#32;&#32;&#32;&#32;&#32;_arr[idx]&#32;=&#32;elt;
398 &#32;&#32;&#32;&#32;&#32;&#32;_len++;
399 &#32;&#32;&#32;&#32;}
400 &#32;&#32;}
401 }
402 
403 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
404 std::optional&lt;T&gt;&#32;<link linkend="_classdsx_1_1structs_1_1vector_1abb50d683767ef3c4d88b34b5ad48b3c9">dsx::structs::vector&lt;T&gt;::erase_at</link>(<emphasis role="keywordtype">int</emphasis>&#32;idx)&#32;{
405 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(idx&#32;&gt;=&#32;_len)&#32;{
406 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::nullopt;
407 &#32;&#32;}
408 
409 &#32;&#32;T&#32;erased_value&#32;=&#32;_arr[idx];
410 &#32;&#32;std::copy(_arr&#32;+&#32;idx&#32;+&#32;1,&#32;_arr&#32;+&#32;_len,&#32;_arr&#32;+&#32;idx);
411 &#32;&#32;_len--;
412 
413 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;erased_value;
414 }
415 
416 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdsx_1_1structs_1_1vector_1afc1eb03bf3d9c8389b36456c12cadb66">dsx::structs::vector&lt;T&gt;::clear</link>()&#32;noexcept(false)&#32;{
417 &#32;&#32;T&#32;*n_arr&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;T[_cap];
418 &#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;_arr;
419 &#32;&#32;_arr&#32;=&#32;n_arr;
420 
421 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_arr)&#32;{
422 &#32;&#32;&#32;&#32;std::stringstream&#32;ss;
423 &#32;&#32;&#32;&#32;ss&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Memory&#32;reallocation&#32;failed&#32;at&#32;line:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;__LINE__
424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;in&#32;function:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;__FUNCTION__;
425 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(ss.str());
426 &#32;&#32;}
427 
428 &#32;&#32;this-&gt;_cap&#32;=&#32;_cap;
429 &#32;&#32;this-&gt;_len&#32;=&#32;0;
430 }
431 
432 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdsx_1_1structs_1_1vector_1ab7612d091ae431bc5e95b707f2db395f">dsx::structs::vector&lt;T&gt;::resize</link>(<emphasis role="keywordtype">int</emphasis>&#32;n_size)&#32;{
433 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n_size&#32;&lt;&#32;_len)&#32;{
434 &#32;&#32;&#32;&#32;_len&#32;=&#32;n_size;
435 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n_size&#32;&gt;&#32;_len&#32;&amp;&amp;&#32;n_size&#32;&gt;&#32;_cap)&#32;{
436 &#32;&#32;&#32;&#32;<link linkend="_classdsx_1_1structs_1_1vector_1a0d6e589875e22d2e17d2ea1deba69abd">reserve</link>(n_size);
437 &#32;&#32;}
438 
439 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_arr)&#32;{
440 &#32;&#32;&#32;&#32;std::stringstream&#32;ss;
441 &#32;&#32;&#32;&#32;ss&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Memory&#32;reallocation&#32;failed&#32;at&#32;line:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;__LINE__
442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;in&#32;function:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;__FUNCTION__;
443 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(ss.str());
444 &#32;&#32;}
445 }
446 
447 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
448 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdsx_1_1structs_1_1vector_1affadecdd1b5acb01d8cbbb0b16b8c647">dsx::structs::vector&lt;T&gt;::swap</link>(<link linkend="_classdsx_1_1structs_1_1vector">dsx::structs::vector&lt;T&gt;</link>&#32;&amp;o_vec)&#32;{
449 &#32;&#32;std::swap(this-&gt;_len,&#32;o_vec._len);
450 &#32;&#32;std::swap(this-&gt;_arr,&#32;o_vec._arr);
451 &#32;&#32;std::swap(this-&gt;_cap,&#32;o_vec._cap);
452 }
</programlisting></section>
