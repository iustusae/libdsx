.TH "dsx::structs::vector< T >" 3 "Sat Jul 29 2023" "Version 0.0.1" "libdsx" \" -*- nroff -*-
.ad l
.nh
.SH NAME
dsx::structs::vector< T > \- A dynamic array-based vector container implementation\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <vector\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBvector\fP ()=default"
.br
.RI "Default constructor for the vector class\&. "
.ti -1c
.RI "\fBvector\fP (std::initializer_list< T > list)"
.br
.RI "Constructor that initializes the vector with elements from an initializer list\&. "
.ti -1c
.RI "\fBvector\fP (int p_size)"
.br
.RI "Constructor that sets the initial size of the vector\&. "
.ti -1c
.RI "\fB~vector\fP ()"
.br
.RI "Destructor for the vector class\&. "
.ti -1c
.RI "int \fBlen\fP () const"
.br
.RI "Get the current number of elements in the vector\&. "
.ti -1c
.RI "int \fBcapacity\fP () const"
.br
.RI "Get the current capacity of the vector\&. "
.ti -1c
.RI "bool \fBis_empty\fP () const"
.br
.RI "Check if the vector is empty\&. "
.ti -1c
.RI "void \fBreserve\fP (int n_size)"
.br
.RI "Reserves memory for a given number of elements in the vector\&. "
.ti -1c
.RI "void \fBshrink\fP ()"
.br
.RI "Reduces the vector's capacity to fit its size\&. "
.ti -1c
.RI "T \fBat\fP (int p_idx) const"
.br
.RI "Returns the element at the specified index\&. "
.ti -1c
.RI "T & \fBoperator[]\fP (int p_idx) const"
.br
.RI "Returns a reference to the element at the specified index\&. "
.ti -1c
.RI "const T & \fBfront\fP () const noexcept"
.br
.RI "Returns a reference to the first element in the vector\&. "
.ti -1c
.RI "const T & \fBback\fP () const noexcept"
.br
.RI "Returns a reference to the last element in the vector\&. "
.ti -1c
.RI "void \fBpush\fP (const T &elt)"
.br
.RI "Adds an element to the end of the vector\&. "
.ti -1c
.RI "std::optional< T > \fBpop\fP ()"
.br
.RI "Removes and returns the last element of the vector\&. "
.ti -1c
.RI "void \fBinsert_at\fP (const T &elt, int idx)"
.br
.RI "Inserts an element at the specified index\&. "
.ti -1c
.RI "std::optional< T > \fBerase_at\fP (int idx)"
.br
.RI "Removes and returns the element at the specified index\&. "
.ti -1c
.RI "void \fBclear\fP ()"
.br
.RI "Removes all elements from the vector\&. "
.ti -1c
.RI "void \fBresize\fP (int n_size)"
.br
.RI "Resizes the vector to the specified size\&. "
.ti -1c
.RI "void \fBswap\fP (\fBvector\fP< T > &o_vec)"
.br
.RI "Swaps the contents of two vectors\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename T>
.br
class dsx::structs::vector< T >"A dynamic array-based vector container implementation\&. 

The vector class provides a dynamic array-based container for holding elements of a specified type\&. It automatically resizes its underlying array to accommodate the elements as they are added or removed\&.
.PP
\fBTemplate Parameters\fP
.RS 4
\fIT\fP The type of elements held in the vector\&. 
.br
\fIcap\fP The initial capacity of the vector\&. Defaults to 5\&. 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename T > \fBdsx::structs::vector\fP< T >::vector ()\fC [default]\fP"

.PP
Default constructor for the vector class\&. This constructor creates an empty vector with the default initial capacity\&. 
.SS "template<typename T > \fBdsx::structs::vector\fP< T >::vector (std::initializer_list< T > list)\fC [inline]\fP"

.PP
Constructor that initializes the vector with elements from an initializer list\&. This constructor creates a vector with the elements provided in the given initializer list\&. It sets the length of the vector to the number of elements in the initializer list\&.
.PP
\fBParameters\fP
.RS 4
\fIlist\fP An initializer list containing elements to be stored in the vector\&. 
.RE
.PP

.SS "template<typename T > \fBdsx::structs::vector\fP< T >::vector (int p_size)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Constructor that sets the initial size of the vector\&. This constructor creates a vector with the specified initial size\&. It allocates memory for the underlying array with the given size and sets the capacity accordingly\&.
.PP
\fBParameters\fP
.RS 4
\fIp_size\fP The initial size of the vector\&. 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIstd::runtime_error\fP If memory allocation fails\&. 
.RE
.PP

.SS "template<typename T > \fBdsx::structs::vector\fP< T >::~\fBvector\fP ()\fC [inline]\fP"

.PP
Destructor for the vector class\&. This destructor automatically deallocates the memory used by the underlying array when the vector goes out of scope\&. It ensures that there are no memory leaks and releases the resources held by the vector\&. 
.SH "Member Function Documentation"
.PP 
.SS "template<typename T > T \fBdsx::structs::vector\fP< T >::at (int p_idx) const"

.PP
Returns the element at the specified index\&. This function provides access to the element at the specified index in the vector\&. It performs boundary checks to ensure that the index is within the valid range of the vector\&. If the index is out of range, the function throws an std::out_of_range exception\&.
.PP
\fBParameters\fP
.RS 4
\fIp_idx\fP The index of the element to access\&. 
.RE
.PP
\fBReturns\fP
.RS 4
The element at the specified index\&. 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIstd::out_of_range\fP If the index is out of range\&. 
.RE
.PP

.SS "template<typename T > const T & \fBdsx::structs::vector\fP< T >::back () const\fC [noexcept]\fP"

.PP
Returns a reference to the last element in the vector\&. This function provides access to the last element in the vector\&. It is used to retrieve the last element when the vector is not empty\&. It does not check if the vector is empty; calling this function on an empty vector results in undefined behavior\&.
.PP
\fBReturns\fP
.RS 4
A reference to the last element in the vector\&. 
.RE
.PP

.SS "template<typename T > int \fBdsx::structs::vector\fP< T >::capacity () const\fC [inline]\fP"

.PP
Get the current capacity of the vector\&. This function returns the current capacity of the vector, which represents the maximum number of elements that can be stored without reallocation\&.
.PP
\fBReturns\fP
.RS 4
The current capacity of the vector\&. 
.RE
.PP

.SS "template<typename T > void \fBdsx::structs::vector\fP< T >::clear"

.PP
Removes all elements from the vector\&. This function removes all elements from the vector, leaving it empty\&. It deallocates the memory used by the underlying array and resets the length and capacity to zero\&.
.PP
\fBExceptions\fP
.RS 4
\fIstd::runtime_error\fP If memory reallocation fails while clearing the vector\&. 
.RE
.PP

.SS "template<typename T > std::optional< T > \fBdsx::structs::vector\fP< T >::erase_at (int idx)"

.PP
Removes and returns the element at the specified index\&. This function removes the element at the specified index in the vector and returns it as an optional value\&. If the index is out of range, the function returns an empty optional (std::nullopt)\&.
.PP
\fBParameters\fP
.RS 4
\fIidx\fP The index of the element to be removed\&. 
.RE
.PP
\fBReturns\fP
.RS 4
An optional containing the removed element if the index is valid, or an empty optional if the index is out of range\&. 
.RE
.PP

.SS "template<typename T > const T & \fBdsx::structs::vector\fP< T >::front () const\fC [noexcept]\fP"

.PP
Returns a reference to the first element in the vector\&. This function provides access to the first element in the vector\&. It is used to retrieve the first element when the vector is not empty\&. It does not check if the vector is empty; calling this function on an empty vector results in undefined behavior\&.
.PP
\fBReturns\fP
.RS 4
A reference to the first element in the vector\&. 
.RE
.PP

.SS "template<typename T > void \fBdsx::structs::vector\fP< T >::insert_at (const T & elt, int idx)"

.PP
Inserts an element at the specified index\&. This function inserts a new element at the specified index in the vector\&. If the index is greater than or equal to the current length of the vector, the function behaves like \fCpush\fP and adds the element to the end of the vector\&. If the vector's size is about to exceed its current capacity, the function doubles the capacity and reallocates memory for the underlying array to accommodate the new element efficiently\&.
.PP
\fBParameters\fP
.RS 4
\fIelt\fP The element to be inserted into the vector\&. 
.br
\fIidx\fP The index at which the element should be inserted\&. 
.RE
.PP

.SS "template<typename T > bool \fBdsx::structs::vector\fP< T >::is_empty () const\fC [inline]\fP"

.PP
Check if the vector is empty\&. This function checks whether the vector is empty, i\&.e\&., if it contains no elements\&.
.PP
\fBReturns\fP
.RS 4
True if the vector is empty, false otherwise\&. 
.RE
.PP

.SS "template<typename T > int \fBdsx::structs::vector\fP< T >::len () const\fC [inline]\fP"

.PP
Get the current number of elements in the vector\&. This function returns the current number of elements present in the vector\&.
.PP
\fBReturns\fP
.RS 4
The number of elements in the vector\&. 
.RE
.PP

.SS "template<typename T > T & \fBdsx::structs::vector\fP< T >::operator[] (int p_idx) const"

.PP
Returns a reference to the element at the specified index\&. This operator provides direct access to the element at the specified index in the vector\&. It performs boundary checks to ensure that the index is within the valid range of the vector\&. If the index is out of range, the operator throws an std::out_of_range exception\&.
.PP
\fBParameters\fP
.RS 4
\fIidx\fP The index of the element to access\&. 
.RE
.PP
\fBReturns\fP
.RS 4
A reference to the element at the specified index\&. 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIstd::out_of_range\fP If the index is out of range\&. 
.RE
.PP

.SS "template<typename T > std::optional< T > \fBdsx::structs::vector\fP< T >::pop"

.PP
Removes and returns the last element of the vector\&. This function removes the last element of the vector and returns it as an optional value\&. If the vector is empty, the function returns an empty optional (std::nullopt)\&.
.PP
\fBReturns\fP
.RS 4
An optional containing the last element of the vector if the vector is not empty, or an empty optional if the vector is empty\&. 
.RE
.PP

.SS "template<typename T > void \fBdsx::structs::vector\fP< T >::push (const T & elt)"

.PP
Adds an element to the end of the vector\&. This function adds a new element to the end of the vector\&. If the vector's size is about to exceed its current capacity, the function doubles the capacity and reallocates memory for the underlying array to accommodate the new element efficiently\&.
.PP
\fBParameters\fP
.RS 4
\fIelt\fP The element to be added to the end of the vector\&. 
.RE
.PP

.SS "template<typename T > void \fBdsx::structs::vector\fP< T >::reserve (int n_size)"

.PP
Reserves memory for a given number of elements in the vector\&. If the requested size is less than or equal to the current capacity, the function does nothing\&. Otherwise, it allocates memory for the specified number of elements and copies the existing elements to the newly allocated memory\&. The function updates the capacity of the vector accordingly\&.
.PP
\fBParameters\fP
.RS 4
\fIn_size\fP The number of elements to reserve memory for\&. 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIstd::runtime_error\fP If memory allocation fails\&. 
.RE
.PP

.SS "template<typename T > void \fBdsx::structs::vector\fP< T >::resize (int n_size)"

.PP
Resizes the vector to the specified size\&. This function resizes the vector to the specified size\&. If the new size is smaller than the current length, elements at the end of the vector are removed\&. If the new size is larger than the current length, the vector's capacity is adjusted to accommodate the new size efficiently\&.
.PP
\fBParameters\fP
.RS 4
\fIn_size\fP The new size of the vector\&. 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIstd::runtime_error\fP If memory reallocation fails while resizing the vector\&. 
.RE
.PP

.SS "template<typename T > void \fBdsx::structs::vector\fP< T >::shrink"

.PP
Reduces the vector's capacity to fit its size\&. This function deallocates the unused memory from the underlying array, reducing the vector's capacity to be equal to the number of elements it contains\&. If the vector is empty, the function does nothing\&.
.PP
\fBExceptions\fP
.RS 4
\fIstd::runtime_error\fP If memory reallocation fails while shrinking\&. 
.RE
.PP

.SS "template<typename T > void \fBdsx::structs::vector\fP< T >::swap (\fBvector\fP< T > & o_vec)"

.PP
Swaps the contents of two vectors\&. This function swaps the contents of the current vector with the contents of another vector\&. It exchanges the lengths, capacities, and underlying arrays of the two vectors\&.
.PP
\fBParameters\fP
.RS 4
\fIo_vec\fP The reference to the vector to be swapped with the current vector\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for libdsx from the source code\&.
